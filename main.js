(()=>{"use strict";var t={192:(t,e,n)=>{n.d(e,{Z:()=>d});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([t.id,"@use 'styles/_header.scss';@use 'styles/_notes.scss';@use 'styles/_sidebar.scss';@use 'styles/_todos.scss';.sidebar .project-title .delete-project-button,.sidebar .project-title .edit-project-button,.sidebar .add-project-button,.content-side .todo-view .add-todo-button,.content-side .todo-view .todo .edit-todo-button,.content-side .todo-view .todo .delete-todo-button,.content-side .add-todo-form .true-add-todo-button,.content-side .add-todo-form .true-todo-edit-button,.content-side .edit-todo-form .true-add-todo-button,.content-side .edit-todo-form .true-todo-edit-button,.content-side .note-view .add-note-button,.content-side .note-view .note form .input-note-button,.content-side .note-view .add-note-window form .input-note-button,.content-side .note-view .note .edit-note-button,.content-side .note-view .note .true-edit-button,.content-side .note-view .note .delete-note-button,.content-side .note-view .add-note-window .edit-note-button,.content-side .note-view .add-note-window .true-edit-button,.content-side .note-view .add-note-window .delete-note-button{background-color:#ef8354;font-weight:bolder;color:#f0f8ff;font-size:calc(5px + 1rem);border:1px solid transparent;border-radius:4px;width:100%;text-align:center}.sidebar .project-title .delete-project-button:hover,.sidebar .project-title .edit-project-button:hover,.sidebar .add-project-button:hover,.content-side .todo-view .add-todo-button:hover,.content-side .todo-view .todo .edit-todo-button:hover,.content-side .todo-view .todo .delete-todo-button:hover,.content-side .add-todo-form .true-add-todo-button:hover,.content-side .add-todo-form .true-todo-edit-button:hover,.content-side .edit-todo-form .true-add-todo-button:hover,.content-side .edit-todo-form .true-todo-edit-button:hover,.content-side .note-view .add-note-button:hover,.content-side .note-view .note form .input-note-button:hover,.content-side .note-view .add-note-window form .input-note-button:hover,.content-side .note-view .note .edit-note-button:hover,.content-side .note-view .note .true-edit-button:hover,.content-side .note-view .note .delete-note-button:hover,.content-side .note-view .add-note-window .edit-note-button:hover,.content-side .note-view .add-note-window .true-edit-button:hover,.content-side .note-view .add-note-window .delete-note-button:hover{color:#2d3142}.sidebar .project-title .delete-project-button:active,.sidebar .project-title .edit-project-button:active,.sidebar .add-project-button:active,.content-side .todo-view .add-todo-button:active,.content-side .todo-view .todo .edit-todo-button:active,.content-side .todo-view .todo .delete-todo-button:active,.content-side .add-todo-form .true-add-todo-button:active,.content-side .add-todo-form .true-todo-edit-button:active,.content-side .edit-todo-form .true-add-todo-button:active,.content-side .edit-todo-form .true-todo-edit-button:active,.content-side .note-view .add-note-button:active,.content-side .note-view .note form .input-note-button:active,.content-side .note-view .add-note-window form .input-note-button:active,.content-side .note-view .note .edit-note-button:active,.content-side .note-view .note .true-edit-button:active,.content-side .note-view .note .delete-note-button:active,.content-side .note-view .add-note-window .edit-note-button:active,.content-side .note-view .add-note-window .true-edit-button:active,.content-side .note-view .add-note-window .delete-note-button:active{box-shadow:0px 2px 2px rgba(45,49,66,0.5)}*{box-sizing:border-box;font-family:'Helvetica', sans-serif;margin:0;padding:0;word-break:break-all}:root,body{padding:0;margin:0;height:100vh;background-color:#f0f8ff}input,textarea{border-radius:2px;border:transparent;resize:none;background-color:#4f5d75}#container{display:grid;grid-template-rows:1fr 10fr;height:100%}header{grid-area:1 / 1 / 2 / 2;background-color:#2d3142;display:flex;align-items:flex-end;padding:10px;box-shadow:0px 2px 2px rgba(79,93,117,0.5)}header .title{margin:0;font-size:calc(4rem + 5px);color:#ef8354}main{grid-area:2 / 1 / 3 / 2;display:grid;grid-template-columns:225px 5fr;height:100%}.sidebar{height:100%;display:grid;grid-template-rows:75px 1fr 50px;background-color:#4f5d75;color:#f0f8ff;text-align:center;padding:10px;gap:10px;width:225px;box-shadow:0px 0px 2px #102528}.sidebar input:hover,.sidebar input:focus,.sidebar .project-title:hover,.sidebar .project-title:focus{background-color:#2d3142}.sidebar .show-name{max-width:205px}.sidebar .project-list{padding-top:5px;display:grid;grid-template-rows:repeat(auto-fit, clamp(25px, 4vh, 50px));gap:clamp(2px, 5px, 10px);width:100%}.sidebar .project-title{border-radius:5px;display:flex;justify-content:space-between;padding:0px 10px;place-items:center;max-width:220px}.sidebar .project-title .edit-title>input{color:#ef8354}.sidebar .project-title .project-heading{grid-column:1 / 2;font-weight:bold;max-width:150px;height:fit-content;font-size:1.17em;text-align:start;display:block}.sidebar .project-title .delete-project-button,.sidebar .project-title .edit-project-button{grid-column:2 / 3;font-weight:bold;padding:0 5px;justify-self:center;max-height:fit-content;max-width:fit-content;font-size:1rem}.sidebar .edit-content{max-width:150px}.content-side{display:grid}.content-side .todo-view{display:grid;gap:4vmin;padding:10px;grid-template-rows:30px;grid-auto-rows:80px}.content-side .todo-view *{color:#f0f8ff}.content-side .todo-view .add-todo-button{grid-row:1 / span 1;max-height:30px}.content-side .todo-view .todo{justify-self:center;background-color:#2d3142;height:100px;width:100%;justify-items:stretch;align-items:center;align-content:center;display:grid;grid-template-columns:30px 5fr 2fr;grid-template-rows:1fr 1fr 1fr 1fr;padding:10px;gap:10px;border-radius:4px}.content-side .todo-view .todo .todo-name{grid-area:1 / 2 / 2 / 3}.content-side .todo-view .todo .todo-description{grid-area:2 / 2 / 4 / 3}.content-side .todo-view .todo .todo-due-date{grid-area:4 / 2 / 5 / 3;font-style:italic}.content-side .todo-view .todo .todo-priority{grid-area:1 / 1 / 5/  2;height:100%;width:20px;color:transparent;border-radius:10px}.content-side .todo-view .todo .edit-todo-button{grid-area:1 / 3 /  3 / 4;height:100%}.content-side .todo-view .todo .delete-todo-button{grid-area:3 / 3 / 5 / 4;height:100%}.content-side .add-todo-form,.content-side .edit-todo-form{grid-area:1 / 1 / 3 / 4;grid-template-columns:30px 5fr 2fr;grid-template-rows:1fr 1fr;display:grid;place-items:center;justify-self:center;background-color:#2d3142;height:100px;width:100%;justify-items:stretch;gap:2%;padding:10px;border-radius:4px}.content-side .add-todo-form .add-todo-name,.content-side .add-todo-form .edit-todo-name,.content-side .edit-todo-form .add-todo-name,.content-side .edit-todo-form .edit-todo-name{grid-area:1 / 2 / 2 / 3;text-align:center;font-size:calc(5px + 1rem);font-weight:bold;width:100%}.content-side .add-todo-form .add-todo-name::placeholder,.content-side .add-todo-form .edit-todo-name::placeholder,.content-side .edit-todo-form .add-todo-name::placeholder,.content-side .edit-todo-form .edit-todo-name::placeholder{color:rgba(240,248,255,0.2)}.content-side .add-todo-form .add-todo-content,.content-side .add-todo-form .edit-todo-content,.content-side .edit-todo-form .add-todo-content,.content-side .edit-todo-form .edit-todo-content{grid-area:2 / 2 / 3 / 3;width:100%;text-align:center}.content-side .add-todo-form .add-todo-content::placeholder,.content-side .add-todo-form .edit-todo-content::placeholder,.content-side .edit-todo-form .add-todo-content::placeholder,.content-side .edit-todo-form .edit-todo-content::placeholder{color:rgba(240,248,255,0.2)}.content-side .add-todo-form .add-todo-priority,.content-side .add-todo-form .edit-todo-priority,.content-side .edit-todo-form .add-todo-priority,.content-side .edit-todo-form .edit-todo-priority{grid-area:1 / 1 / 3 / 2;height:100%;width:20px;border-radius:10px;color:transparent}.content-side .add-todo-form .add-todo-priority::placeholder,.content-side .add-todo-form .edit-todo-priority::placeholder,.content-side .edit-todo-form .add-todo-priority::placeholder,.content-side .edit-todo-form .edit-todo-priority::placeholder{color:rgba(240,248,255,0.2)}.content-side .add-todo-form .add-todo-due-date,.content-side .add-todo-form .edit-todo-due-date,.content-side .edit-todo-form .add-todo-due-date,.content-side .edit-todo-form .edit-todo-due-date{grid-area:1 / 3 /2 / 4;width:100%;font-style:italic}.content-side .add-todo-form .add-todo-due-date::placeholder,.content-side .add-todo-form .edit-todo-due-date::placeholder,.content-side .edit-todo-form .add-todo-due-date::placeholder,.content-side .edit-todo-form .edit-todo-due-date::placeholder{color:rgba(240,248,255,0.2)}.content-side .add-todo-form .true-add-todo-button,.content-side .add-todo-form .true-todo-edit-button,.content-side .edit-todo-form .true-add-todo-button,.content-side .edit-todo-form .true-todo-edit-button{width:100%;height:100%}.content-side .note-view{display:grid;padding:10px;grid-template-rows:30px;grid-template-columns:1fr 1fr 1fr 1fr;grid-auto-rows:250px;gap:5px;justify-content:space-evenly}.content-side .note-view .add-note-button{grid-area:1 / 1 / 2 / 5;max-height:30px}.content-side .note-view .note,.content-side .note-view .add-note-window{background-color:#2d3142;height:250px;width:200px;justify-self:center;justify-items:stretch;display:grid;grid-template-columns:1fr 1fr;grid-template-rows:1fr 6fr 1fr;padding:10px;gap:4px;border-radius:4px}.content-side .note-view .note *,.content-side .note-view .add-note-window *{color:#f0f8ff}.content-side .note-view .note form,.content-side .note-view .add-note-window form{grid-area:1 / 1 / 4 / 3;display:grid;grid-template-rows:1fr 6fr 1fr;place-items:center;gap:5%}.content-side .note-view .note form .input-note-name,.content-side .note-view .note form .edit-note-name,.content-side .note-view .add-note-window form .input-note-name,.content-side .note-view .add-note-window form .edit-note-name{text-align:center;font-size:calc(5px + 1rem);font-weight:bold;width:100%}.content-side .note-view .note form .input-note-content,.content-side .note-view .note form .edit-note-content,.content-side .note-view .add-note-window form .input-note-content,.content-side .note-view .add-note-window form .edit-note-content{height:100%;width:100%}.content-side .note-view .note form .input-note-button,.content-side .note-view .add-note-window form .input-note-button{width:100%}.content-side .note-view .note h3,.content-side .note-view .add-note-window h3{grid-area:1 / 1 / 2 / 3;text-align:center;word-break:break-all;font-size:calc(5px + 1rem)}.content-side .note-view .note p,.content-side .note-view .add-note-window p{word-break:break-all;grid-area:2 / 1 / 3 / 3;width:100%}\n","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["@use 'styles/_header.scss';\n@use 'styles/_notes.scss';\n@use 'styles/_sidebar.scss';\n@use 'styles/_todos.scss';\n\n$primary-color: #2d3142;\n$secondary-color: #4f5d75;\n$ternary-color: #ef8354;\n$light-text-color: aliceblue;\n$dark-text-color: black;\n$title-font-size: calc(5px + 1rem);\n$content-font-size: calc(5px + 0.5rem);\n\n%action-button {\n  background-color: $ternary-color;\n  font-weight: bolder;\n  color: $light-text-color;\n  font-size: $title-font-size;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  width: 100%;\n  text-align: center;\n  &:hover {\n    color: $primary-color;\n  }\n  &:active {\n    box-shadow: 0px 2px 2px rgba($primary-color, 0.5);\n  }\n}\n\n* {\n  box-sizing: border-box;\n  font-family: 'Helvetica', sans-serif;\n  margin: 0;\n  padding: 0;\n  word-break: break-all;\n}\n\n// We have to use @import or @use  for SASS\n:root,\nbody {\n  padding: 0;\n  margin: 0;\n  height: 100vh;\n  background-color: $light-text-color;\n}\n\ninput,\ntextarea {\n  border-radius: 2px;\n  border: transparent;\n  resize: none;\n  background-color: $secondary-color;\n}\n\n#container {\n  display: grid;\n  grid-template-rows: 1fr 10fr;\n  height: 100%;\n}\n\nheader {\n  grid-area: 1 / 1 / 2 / 2;\n  background-color: $primary-color;\n  display: flex;\n  align-items: flex-end;\n\n  .title {\n    margin: 0;\n    font-size: calc(4rem + 5px);\n    color: $ternary-color;\n  }\n  padding: 10px;\n  box-shadow: 0px 2px 2px rgba($secondary-color, 0.5);\n}\n\nmain {\n  grid-area: 2 / 1 / 3 / 2;\n  display: grid;\n  grid-template-columns: 225px 5fr;\n  height: 100%;\n}\n\n.sidebar {\n  height: 100%;\n  display: grid;\n  grid-template-rows: 75px 1fr 50px;\n  background-color: $secondary-color;\n  color: $light-text-color;\n  text-align: center;\n  padding: 10px;\n  gap: 10px;\n  width: 225px;\n  box-shadow: 0px 0px 2px rgb(16, 37, 40);\n\n  input,\n  .project-title {\n    &:hover,\n    &:focus {\n      background-color: $primary-color;\n    }\n  }\n  .show-name {\n    max-width: 205px;\n  }\n  .project-list {\n    padding-top: 5px;\n\n    display: grid;\n    grid-template-rows: repeat(auto-fit, clamp(25px, 4vh, 50px));\n    gap: clamp(2px, 5px, 10px);\n    width: 100%;\n  }\n\n  .project-title {\n    border-radius: 5px;\n    display: flex;\n    justify-content: space-between;\n    padding: 0px 10px;\n    place-items: center;\n    max-width: 220px;\n    .edit-title > input {\n      color: $ternary-color;\n    }\n\n    .project-heading {\n      grid-column: 1 / 2;\n      font-weight: bold;\n      max-width: 150px;\n      height: fit-content;\n      font-size: 1.17em;\n      text-align: start;\n      display: block;\n    }\n    .delete-project-button,\n    .edit-project-button {\n      grid-column: 2 / 3;\n      font-weight: bold;\n      @extend %action-button;\n      padding: 0 5px;\n      justify-self: center;\n      max-height: fit-content;\n      max-width: fit-content;\n      font-size: 1rem;\n    }\n  }\n  .add-project-button {\n    @extend %action-button;\n  }\n\n  .edit-content {\n    max-width: 150px;\n  }\n}\n\n.content-side {\n  display: grid;\n\n  .todo-view {\n    display: grid;\n    gap: 4vmin;\n    padding: 10px;\n    grid-template-rows: 30px;\n    grid-auto-rows: 80px;\n    * {\n      color: $light-text-color;\n    }\n    .add-todo-button {\n      grid-row: 1 / span 1;\n      @extend %action-button;\n      max-height: 30px;\n    }\n\n    .todo {\n      justify-self: center;\n      background-color: $primary-color;\n      height: 100px;\n      width: 100%;\n      justify-items: stretch;\n      align-items: center;\n      align-content: center;\n      display: grid;\n      grid-template-columns: 30px 5fr 2fr;\n      grid-template-rows: 1fr 1fr 1fr 1fr;\n      padding: 10px;\n      gap:  10px;\n      border-radius: 4px;\n\n      .todo-name {\n        grid-area: 1 / 2 / 2 / 3;\n      }\n\n      .todo-description {\n        grid-area: 2 / 2 / 4 / 3;\n      }\n\n      .todo-due-date {\n        grid-area: 4 / 2 / 5 / 3; \n        font-style: italic;\n\n      }\n\n      .todo-priority {\n        grid-area: 1 / 1 / 5/  2;\n        height: 100%;\n        width: 20px;    \n        color: transparent;\n        border-radius: 10px\n\n      }\n\n      // .expand-todo-button, .shrink-todo-button {\n      //   grid-area: 1 / 3 / 2 / 4;\n    \n      //   @extend %action-button;\n      //   height: 100%;\n\n      // }\n\n      .edit-todo-button {\n        grid-area: 1 / 3 /  3 / 4;\n        @extend %action-button;\n        height: 100%;\n\n      }\n\n      .delete-todo-button {\n        grid-area: 3 / 3 / 5 / 4; \n        height: 100%;\n        @extend %action-button;\n      }\n    }\n  }\n\n  .add-todo-form, .edit-todo-form {\n    grid-area: 1 / 1 / 3 / 4;\n    grid-template-columns: 30px 5fr 2fr;\n    grid-template-rows: 1fr 1fr;\n    display: grid;\n    place-items: center;\n    justify-self: center;\n    background-color: $primary-color;\n    height: 100px;\n    width: 100%;\n    justify-items: stretch;\n    gap: 2%;\n    padding: 10px;\n    border-radius: 4px;\n    .add-todo-name,\n    .edit-todo-name {\n      grid-area: 1 / 2 / 2 / 3;\n      text-align: center;\n      font-size: $title-font-size;\n      font-weight: bold;\n      width: 100%;\n      &::placeholder {\n        color: rgba($light-text-color, 0.2);\n      }\n    }\n\n    .add-todo-content,\n    .edit-todo-content {\n      grid-area: 2 / 2 / 3 / 3;\n      width: 100%;\n      text-align: center;\n\n      &::placeholder {\n        color: rgba($light-text-color, 0.2);\n      }\n    }\n\n    .add-todo-priority,\n    .edit-todo-priority {\n      grid-area: 1 / 1 / 3 / 2;\n      height: 100%;\n      width: 20px;    \n \n      border-radius: 10px;\n\n      color: transparent;\n\n      &::placeholder {\n        color: rgba($light-text-color, 0.2);\n      }\n    }\n    .add-todo-due-date,\n    .edit-todo-due-date {\n      grid-area: 1 / 3 /2 / 4;\n      width: 100%;\n      font-style: italic;\n\n      &::placeholder {\n        color: rgba($light-text-color, 0.2);\n      }\n    }\n\n    .true-add-todo-button, .true-todo-edit-button {\n      width: 100%;\n      height: 100%;\n      @extend %action-button;\n    }\n  }\n\n  .note-view {\n    display: grid;\n    padding: 10px;\n    grid-template-rows: 30px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-auto-rows: 250px;\n    gap: 5px;\n    justify-content: space-evenly;\n    .add-note-button {\n      grid-area: 1 / 1 / 2 / 5;\n      @extend %action-button;\n      max-height: 30px;\n    }\n\n    .note,\n    .add-note-window {\n      background-color: $primary-color;\n      height: 250px;\n      width: 200px;\n      justify-self: center;\n      justify-items: stretch;\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      grid-template-rows: 1fr 6fr 1fr;\n      padding: 10px;\n      gap: 4px;\n      border-radius: 4px;\n\n      * {\n        color: $light-text-color;\n      }\n\n      form {\n        grid-area: 1 / 1 / 4 / 3;\n        display: grid;\n        grid-template-rows: 1fr 6fr 1fr;\n        place-items: center;\n        gap: 5%;\n\n        .input-note-name,\n        .edit-note-name {\n          text-align: center;\n          font-size: $title-font-size;\n          font-weight: bold;\n          width: 100%;\n        }\n        .input-note-content,\n        .edit-note-content {\n          height: 100%;\n          width: 100%;\n        }\n        .input-note-button {\n          width: 100%;\n          @extend %action-button;\n        }\n      }\n\n      h3 {\n        grid-area: 1 / 1 / 2 / 3;\n        text-align: center;\n        word-break: break-all;\n\n        font-size: $title-font-size;\n      }\n      p {\n        word-break: break-all;\n        grid-area: 2 / 1 / 3 / 3;\n        width: 100%;\n      }\n\n      .edit-note-button,\n      .true-edit-button,\n      .delete-note-button {\n        @extend %action-button;\n      }\n    }\n  }\n}\n"],sourceRoot:""}]);const d=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);o&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var a={},i=[],d=0;d<t.length;d++){var c=t[d],s=o.base?c[0]+o.base:c[0],u=a[s]||0,l="".concat(s," ").concat(u);a[s]=u+1;var m=n(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)e[m].references++,e[m].updater(p);else{var g=r(p,o);o.byIndex=d,e.splice(d,0,{identifier:l,updater:g,references:1})}i.push(l)}return i}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var d=n(a[i]);e[d].references--}for(var c=o(t,r),s=0;s<a.length;s++){var u=n(a[s]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return t[o](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=t=>{const e=t,n=[],o=t=>n.findIndex((e=>e.name===t));return{get itemList(){return n},get itemType(){return e},get length(){return n.length},get itemNameList(){return n.map((t=>t.name))},addItem:t=>{n.push(t)},removeItem:t=>{n.splice(t,1)},getLength:()=>n.length,getItemByName:t=>{const e=o(t);return console.log(t),console.log(e),console.log(n),n[e]},getItemIndexByName:o,editItem:(t,e)=>{n[t].parameters=e}}},e=function(){const e=["Note","ToDo"],n=t("Project");let o=0,r=0;const a=[];let i=!0;const d=t=>{o=n.getItemIndexByName(t),localStorage.setItem("originalName",t)},c=()=>{try{return console.log([n]),n.itemList[o]}catch{return n.itemList[0]}},s=()=>n.itemNameList[o],u=(o=`Project ${r}`)=>{const a=((e,n)=>{let o=e;const r=new Map;n.forEach((e=>{r.set(e,t(e))}));const a=t=>r.get(t);return{get name(){return o},set name(t){o=t},addItem:(t,e)=>{a(t).addItem(e)},deleteItem:(t,e)=>{const n=a(t),o=n.getItemIndexByName(e);n.removeItem(o)},editItem:(t,e,n)=>{const o=a(t),r=o.getItemIndexByName(e);o.editItem(r,n)},getTypeNameList:a}})(o,e);return n.addItem(a),r+=1,a},l=t=>n.getItemByName(t),m=(t,e)=>{const n=l(t).getTypeNameList(e).itemNameList;console.log(n),localStorage.setItem(`${t}-${e}List`,JSON.stringify(n))},p=(t,e)=>{let r;"Note"===t?r=(([t,e])=>{let n=t,o=e;return{get textContent(){return o},set textContent(t){o=t},get name(){return n},set name(t){n=t},get parameters(){return[n,o]},set parameters([t,e]){n=t,o=e}}})(e):"ToDo"===t&&(r=(([t,e,n,o])=>{let r=t,a=e,i=n,d=o;return{get name(){return r},set name(t){r=t},get description(){return a},set description(t){a=t},get dueDate(){return i},set dueDate(t){i=t},get priority(){return d},set priority(t){d=t},get parameters(){return[r,a,i,d]},set parameters([t,e,n,o]){r=t,a=e,i=n,d=o}}})(e)),n.itemList[o].addItem(t,r),m(s(),t),i||g()},g=()=>{const t=s(),e=JSON.parse(localStorage.getItem("projectList"));localStorage.setItem("originalName",t),e&&(e.forEach((t=>{d(t);const e=JSON.parse(localStorage.getItem(`${t}-ToDoList`));console.log(JSON.parse(localStorage.getItem(`${t}-ToDoList`)));const n=JSON.parse(localStorage.getItem(`${t}-NoteList`));if(console.log(JSON.parse(localStorage.getItem(`${t}-ToDoList`))),e){console.log("prop",e);const n=l(t).getTypeNameList("ToDo");e.forEach((e=>{const o=n.getItemByName(e);localStorage.setItem(`${t}-ToDoList-${e}`,JSON.stringify(o))}))}if(n){const e=l(t).getTypeNameList("Note");n.forEach((n=>{const o=e.getItemByName(n);localStorage.setItem(`${t}-NoteList-${n}`,JSON.stringify(o))}))}})),d(t))};try{(()=>{i=!0;const t=localStorage.getItem("originalName"),e=JSON.parse(localStorage.getItem("projectList"));e?(e.forEach((t=>{u(t),d(t);const e=JSON.parse(localStorage.getItem(`${t}-ToDoList`));console.log(JSON.parse(localStorage.getItem(`${t}-ToDoList`))),e&&e.forEach((e=>{const n=JSON.parse(localStorage.getItem(`${t}-ToDoList-${e}`));console.log(n),p("ToDo",[n.name,n.description,n.dueDate,n.priority])}));const n=JSON.parse(localStorage.getItem(`${t}-NoteList`));n&&n.forEach((e=>{const n=JSON.parse(localStorage.getItem(`${t}-NoteList-${e}`));p("Note",[n.name,n.textContent])}))})),d(t)):u(),i=!1})()}catch{u()}return{get projects(){return n.itemList},get names(){const t=n.itemList.map((t=>t.name));return localStorage.setItem("projectList",JSON.stringify(t)),t},addProject:u,deleteProject:t=>{const e=(t=>n.getItemIndexByName(t))(t);n.removeItem(e),(t=>{const e=JSON.parse(localStorage.getItem(`${t}-ToDoList`)),n=JSON.parse(localStorage.getItem(`${t}-NoteList`));e&&e.forEach((e=>{localStorage.removeItem(`${t}-ToDoList-${e}`)})),n&&n.forEach((e=>{localStorage.removeItem(`${t}-ToDoList-${e}`)})),localStorage.removeItem(`${t}-ToDoList`),localStorage.removeItem(`${t}-NoteList`)})(t),localStorage.removeItem(t),o===e&&(o=0),0===n.length&&(r=0,o=0,u())},editProjectName:(t,e)=>{g(),s(),((t,e)=>{const n=JSON.parse(localStorage.getItem(`${t}-ToDoList`)),o=JSON.parse(localStorage.getItem(`${t}-NoteList`));n&&n.forEach((t=>{localStorage.setItem(`${e}-ToDoList-${t}`,n)})),o&&o.forEach((t=>{localStorage.setItem(`${e}-NoteList-${t}`,o)})),localStorage.removeItem(`${t}-ToDoList`),localStorage.removeItem(`${t}-NoteList`)})(t,e),l(t).name=e,d(e)},getCurrentProject:c,getCurrentProjectName:s,getTypeNameList:t=>c().getTypeNameList(t),switchProject:d,addTool:p,deleteTool:(t,e)=>{c().deleteItem(t,e),m(s(),t),i||g()},editTool:(t,e,n)=>{c().editItem(t,e,n),m(s(),t),i||g()},updateObservers:function(t){a.forEach((e=>{e.updateView(t)}))},addObservers:t=>{t.forEach((t=>{a.push(t)}))},updateObserver:(t,e)=>{const n=a.findIndex((e=>e.observerName===t));a[n].updateView(e)}}};function o(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function r(t){return o(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function a(t){o(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(t){if(o(1,arguments),!r(t)&&"number"!=typeof t)return!1;var e=a(t);return!isNaN(Number(e))}var d={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function c(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,o=t.formats[n]||t.formats[t.defaultWidth];return o}}const s={date:c({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:c({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:c({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(t){return function(e,n){var o,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,i=r.width?String(r.width):a;o=t.formattingValues[i]||t.formattingValues[a]}else{var d=t.defaultWidth,c=r.width?String(r.width):t.defaultWidth;o=t.values[c]||t.values[d]}return o[t.argumentCallback?t.argumentCallback(e):e]}}const m={ordinalNumber:function(t,e){var n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function p(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,d=a[0],c=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(c)?h(c,(function(t){return t.test(d)})):g(c,(function(t){return t.test(d)}));i=t.valueCallback?t.valueCallback(s):s,i=n.valueCallback?n.valueCallback(i):i;var u=e.slice(d.length);return{value:i,rest:u}}}function g(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function h(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var f,A={ordinalNumber:(f={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(f.matchPattern);if(!n)return null;var o=n[0],r=t.match(f.parsePattern);if(!r)return null;var a=f.valueCallback?f.valueCallback(r[0]):r[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(o.length);return{value:a,rest:i}}),era:p({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:p({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:p({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:p({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:p({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const C={code:"en-US",formatDistance:function(t,e,n){var o,r=d[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:s,formatRelative:function(t,e,n,o){return u[t]},localize:m,match:A,options:{weekStartsOn:0,firstWeekContainsDate:1}};function w(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function b(t,e){o(2,arguments);var n=a(t).getTime(),r=w(e);return new Date(n+r)}function v(t,e){o(2,arguments);var n=w(e);return b(t,-n)}var B=864e5;function y(t){o(1,arguments);var e=1,n=a(t),r=n.getUTCDay(),i=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function x(t){o(1,arguments);var e=a(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var i=y(r),d=new Date(0);d.setUTCFullYear(n,0,4),d.setUTCHours(0,0,0,0);var c=y(d);return e.getTime()>=i.getTime()?n+1:e.getTime()>=c.getTime()?n:n-1}function N(t){o(1,arguments);var e=x(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=y(n);return r}var E=6048e5;function T(t,e){o(1,arguments);var n=e||{},r=n.locale,i=r&&r.options&&r.options.weekStartsOn,d=null==i?0:w(i),c=null==n.weekStartsOn?d:w(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=a(t),u=s.getUTCDay(),l=(u<c?7:0)+u-c;return s.setUTCDate(s.getUTCDate()-l),s.setUTCHours(0,0,0,0),s}function k(t,e){o(1,arguments);var n=a(t),r=n.getUTCFullYear(),i=e||{},d=i.locale,c=d&&d.options&&d.options.firstWeekContainsDate,s=null==c?1:w(c),u=null==i.firstWeekContainsDate?s:w(i.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(r+1,0,u),l.setUTCHours(0,0,0,0);var m=T(l,e),p=new Date(0);p.setUTCFullYear(r,0,u),p.setUTCHours(0,0,0,0);var g=T(p,e);return n.getTime()>=m.getTime()?r+1:n.getTime()>=g.getTime()?r:r-1}function S(t,e){o(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:w(a),d=null==n.firstWeekContainsDate?i:w(n.firstWeekContainsDate),c=k(t,e),s=new Date(0);s.setUTCFullYear(c,0,d),s.setUTCHours(0,0,0,0);var u=T(s,e);return u}var j=6048e5;function M(t,e){for(var n=t<0?"-":"",o=Math.abs(t).toString();o.length<e;)o="0"+o;return n+o}const D=function(t,e){var n=t.getUTCFullYear(),o=n>0?n:1-n;return M("yy"===e?o%100:o,e.length)},L=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):M(n+1,2)},P=function(t,e){return M(t.getUTCDate(),e.length)},I=function(t,e){return M(t.getUTCHours()%12||12,e.length)},U=function(t,e){return M(t.getUTCHours(),e.length)},Y=function(t,e){return M(t.getUTCMinutes(),e.length)},q=function(t,e){return M(t.getUTCSeconds(),e.length)},W=function(t,e){var n=e.length,o=t.getUTCMilliseconds();return M(Math.floor(o*Math.pow(10,n-3)),e.length)};var O={G:function(t,e,n){var o=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var o=t.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return D(t,e)},Y:function(t,e,n,o){var r=k(t,o),a=r>0?r:1-r;return"YY"===e?M(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):M(a,e.length)},R:function(t,e){return M(x(t),e.length)},u:function(t,e){return M(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return M(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return M(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){var o=t.getUTCMonth();switch(e){case"M":case"MM":return L(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){var o=t.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return M(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var i=function(t,e){o(1,arguments);var n=a(t),r=T(n,e).getTime()-S(n,e).getTime();return Math.round(r/j)+1}(t,r);return"wo"===e?n.ordinalNumber(i,{unit:"week"}):M(i,e.length)},I:function(t,e,n){var r=function(t){o(1,arguments);var e=a(t),n=y(e).getTime()-N(e).getTime();return Math.round(n/E)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):M(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):P(t,e)},D:function(t,e,n){var r=function(t){o(1,arguments);var e=a(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),i=n-r;return Math.floor(i/B)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):M(r,e.length)},E:function(t,e,n){var o=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return M(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return M(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var o=t.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return M(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){var o=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){var o,r=t.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){var o,r=t.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var o=t.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return I(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):U(t,e)},K:function(t,e,n){var o=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):M(o,e.length)},k:function(t,e,n){var o=t.getUTCHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):M(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Y(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):q(t,e)},S:function(t,e){return W(t,e)},X:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return z(r);case"XXXX":case"XX":return J(r);default:return J(r,":")}},x:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"x":return z(r);case"xxxx":case"xx":return J(r);default:return J(r,":")}},O:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+$(r,":");default:return"GMT"+J(r,":")}},z:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+$(r,":");default:return"GMT"+J(r,":")}},t:function(t,e,n,o){var r=o._originalDate||t;return M(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,o){return M((o._originalDate||t).getTime(),e.length)}};function $(t,e){var n=t>0?"-":"+",o=Math.abs(t),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=e||"";return n+String(r)+i+M(a,2)}function z(t,e){return t%60==0?(t>0?"-":"+")+M(Math.abs(t)/60,2):J(t,e)}function J(t,e){var n=e||"",o=t>0?"-":"+",r=Math.abs(t);return o+M(Math.floor(r/60),2)+n+M(r%60,2)}const Q=O;function F(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function H(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const R={p:H,P:function(t,e){var n,o=t.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return F(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",F(r,e)).replace("{{time}}",H(a,e))}};function X(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var G=["D","DD"],V=["YY","YYYY"];function _(t){return-1!==G.indexOf(t)}function Z(t){return-1!==V.indexOf(t)}function K(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var tt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,nt=/^'([^]*?)'?$/,ot=/''/g,rt=/[a-zA-Z]/;function at(t,e,n){o(2,arguments);var r=String(e),d=n||{},c=d.locale||C,s=c.options&&c.options.firstWeekContainsDate,u=null==s?1:w(s),l=null==d.firstWeekContainsDate?u:w(d.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=c.options&&c.options.weekStartsOn,p=null==m?0:w(m),g=null==d.weekStartsOn?p:w(d.weekStartsOn);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");var h=a(t);if(!i(h))throw new RangeError("Invalid time value");var f=X(h),A=v(h,f),b={firstWeekContainsDate:l,weekStartsOn:g,locale:c,_originalDate:h},B=r.match(et).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,R[e])(t,c.formatLong,b):t})).join("").match(tt).map((function(n){if("''"===n)return"'";var o=n[0];if("'"===o)return it(n);var r=Q[o];if(r)return!d.useAdditionalWeekYearTokens&&Z(n)&&K(n,e,t),!d.useAdditionalDayOfYearTokens&&_(n)&&K(n,e,t),r(A,n,c.localize,b);if(o.match(rt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return n})).join("");return B}function it(t){return t.match(nt)[1].replace(ot,"'")}const dt=t=>{const e=t,n=(t=>{const e=t,n=()=>{e.updateObserver("Note",e)};return{get model(){return e},addNote:t=>{t.preventDefault();const o=[t.target.form[0].value,t.target.form[1].value];0!==t.target.form[0].value.length&&0!==t.target.form[1].value.length&&(e.addTool("Note",o),n())},editNote:t=>{const o=[t.target.form[0].value,t.target.form[1].value],r=t.target.form[3].value;0!==t.target.form[0].value.length&&0!==t.target.form[1].value.length&&(e.editTool("Note",r,o),n())},deleteNote:t=>{const o=(t=>t.target.parentElement.children[0].textContent)(t);e.deleteTool("Note",o),n()}}})(e),o=(t=>{const e=t,n=t=>{try{return at(new Date(t),"MM/dd/yyyy"),!0}catch{return!1}},o=()=>{e.updateObserver("ToDo",e)};return{get model(){return e},addTodo:t=>{if(t.preventDefault(),!1===n(t.target.form[2].value))return;console.log("passed");const r=[t.target.form[0].value,t.target.form[1].value,t.target.form[2].value,t.target.form[3].value];e.addTool("ToDo",r),o()},editTodo:t=>{if(!n(t.target.form[2].value))return void console.log("what");const r=[t.target.form[0].value,t.target.form[1].value,t.target.form[2].value,t.target.form[3].value],a=t.target.form[5].value;e.editTool("ToDo",a,r),o()},deleteTodo:t=>{const n=(t=>t.target.parentElement.children[0].textContent)(t);e.deleteTool("ToDo",n),o()}}})(e),r=(t=>{const e=t,n=()=>{e.updateObserver("Project",e)},o=()=>{e.updateObservers(e)};return{get model(){return e},addProject:()=>{e.names.length>15||(e.addProject(),n())},editProjectName:t=>{if(t.target.size<16&&(t.target.size=t.target.form[0].value.length),"Enter"===t.key){t.preventDefault();const o=t.target.form[0].value,r=t.target.form[1].value;e.editProjectName(r,o),n()}},deleteProject:t=>{e.deleteProject(t.target.parentNode.children[0].textContent),o()},switchProject:t=>{e.switchProject(t.target.textContent),o()}}})(e);return{get model(){return e},get noteController(){return n},get todoController(){return o},get projectController(){return r}}},ct=t=>{const e=t,{model:n}=t,o=function(t){const e=t,n=t=>t.target.parentElement,o=t=>{t.preventDefault();const o=((t,e)=>n(t).children[0].textContent)(t),r=document.createElement("div");r.className="edit-proj-window";const a=document.createElement("form");a.className="edit-title";const i=document.createElement("input");i.type="text",i.value=o,i.className="project-heading",i.size=o.length,i.maxLength=15;const d=document.createElement("input");d.type="hidden",d.value=o,i.addEventListener("keydown",e.editProjectName),a.appendChild(i),a.appendChild(d),r.appendChild(a),n(t).replaceChildren(a)},r=()=>{e.addProject()},a=t=>{const e=document.createElement("div");return e.className="project-list",t.forEach((t=>{const n=document.createElement("div");n.className="project-title";const o=document.createElement("h3");o.className="project-heading",o.textContent=t;const r=document.createElement("button");r.textContent="X",r.className="delete-project-button",n.appendChild(o),n.appendChild(r),e.appendChild(n)})),e.cloneNode(!0)};return{get observerName(){return"Project"},buildView:a,updateView:t=>{const n=t.names;document.querySelectorAll(".add-project-button, .project-list, .project-title").forEach((t=>{t.remove()}));const i=a(n),d=document.querySelector(".sidebar");d.appendChild(i);const c=document.createElement("button");c.textContent="Add Project",c.className="add-project-button",c.addEventListener("click",r),d.appendChild(c),document.querySelectorAll(".project-heading").forEach((t=>{t.addEventListener("click",e.switchProject),t.addEventListener("contextmenu",o)})),document.querySelectorAll(".delete-project-button").forEach((t=>{t.addEventListener("click",e.deleteProject)})),document.querySelector(".show-name").textContent=t.getCurrentProjectName()}}}(e.projectController),r=function(t){const e=t,n=t=>t.target.parentElement,o=(t,e)=>n(t).children[e].textContent,r=t=>{t.target.disabled=!0;const n=document.createElement("div");n.className="add-note-window";const o=document.createElement("form"),r=document.createElement("input");r.type="text",r.className="input-note-name",r.required=!0;const a=document.createElement("textarea");a.className="input-note-content",a.required=!0;const i=document.createElement("input");i.type="button",i.value="Add",i.className="input-note-button",i.addEventListener("click",e.addNote),o.appendChild(r),o.appendChild(a),o.appendChild(i),n.appendChild(o),document.querySelector(".note-view").appendChild(n)},a=t=>{const r=o(t,0),a=o(t,1),i=document.createElement("div");i.className="edit-note-window";const d=document.createElement("form"),c=document.createElement("input");c.type="text",c.value=r,c.className="edit-note-name";const s=document.createElement("textarea");s.value=a,s.className="edit-note-content";const u=document.createElement("input");u.type="button",u.value="edit",u.className="true-edit-button";const l=document.createElement("input");l.type="hidden",l.value=r,u.addEventListener("click",e.editNote),d.appendChild(c),d.appendChild(s),d.appendChild(u),d.appendChild(l),i.appendChild(d),n(t).replaceChildren(d)},i=()=>{const t=document.querySelectorAll(".edit-note-button");document.querySelectorAll(".delete-note-button").forEach((t=>t.addEventListener("click",e.deleteNote))),t.forEach((t=>t.addEventListener("click",a))),document.querySelector("button.add-note-button").addEventListener("click",r)},d=t=>{const e=document.createElement("div");e.className="note-view",t.forEach((t=>{const[n,o]=t.parameters,r=document.createElement("form");r.className="note";const a=document.createElement("h3");a.textContent=n;const i=document.createElement("p");i.textContent=o;const d=document.createElement("input");d.type="button",d.className="edit-note-button",d.value="edit";const c=document.createElement("input");c.value="delete",c.type="button",c.className="delete-note-button",r.appendChild(a),r.appendChild(i),r.appendChild(d),r.appendChild(c),e.appendChild(r)}));const n=document.createElement("button");return n.className="add-note-button",n.textContent="Add Note",e.appendChild(n),e.cloneNode(!0)};return i(),{get observerName(){return"Note"},get controller(){return e},buildView:d,updateView:t=>{const e=t.getTypeNameList("Note").itemList;document.querySelectorAll(".note, .add-note-window").forEach((t=>{t.remove()}));const n=d(e),o=document.querySelector("div.note-view");document.querySelector(".content-side").replaceChild(n,o),i()}}}(e.noteController),a=function(t){const e=t,n=t=>t.target.parentElement,o=(t,e)=>n(t).children[e].textContent,r=t=>{const e=t.target.value;console.log(e),t.target.style.backgroundColor="1"===e?"aquamarine":"2"===e?"rgb(255, 255, 205)":"rgb(255, 139, 126)"},a=()=>{document.querySelector(".add-todo-button").disabled=!0;const t=document.createElement("div");t.className="add-todo-window";const n=document.createElement("form");n.className="add-todo-form";const o=document.createElement("input");o.type="text",o.className="add-todo-name",o.placeholder="Bob Jones";const a=document.createElement("textarea");a.className="add-todo-content",a.placeholder="placeholder description";const i=document.createElement("input");i.type="date",i.className="add-todo-due-date",i.maxLength=8;const d=document.createElement("input");d.type="number",d.className="add-todo-priority",d.style.backgroundColor="aquamarine",d.value=1,d.max=3,d.min=1,d.maxLength=1,d.addEventListener("input",r);const c=document.createElement("input");c.type="button",c.value="Add",c.className="true-add-todo-button",c.addEventListener("click",e.addTodo),n.appendChild(o),n.appendChild(a),n.appendChild(i),n.appendChild(d),n.appendChild(c),t.appendChild(n),document.querySelector(".todo-view").appendChild(t)},i=t=>{const a=o(t,0),i=o(t,1),d=o(t,2),c=o(t,3);document.querySelector(".todo").style.visibility="hidden";const s=document.createElement("div");s.className="edit-todo-window";const u=document.createElement("form");u.className="edit-todo-form";const l=document.createElement("input");l.type="text",l.value=a,l.className="edit-todo-name";const m=document.createElement("textarea");m.value=i,m.className="edit-todo-content";const p=document.createElement("input");p.type="date",p.value=at(new Date(d),"MM/dd/yyyy"),p.className="edit-todo-due-date",p.maxLength=8;const g=document.createElement("input");g.type="number",g.value=c,g.className="edit-todo-priority",g.value=1,g.max=3,g.min=1,g.addEventListener("input",r),g.style.backgroundColor="1"===c?"aquamarine":"2"===c?"rgb(255, 255, 205)":"rgb(255, 139, 126)";const h=document.createElement("input");h.type="button",h.value="edit",h.className="true-todo-edit-button";const f=document.createElement("input");f.type="hidden",f.value=a,h.addEventListener("click",e.editTodo),u.appendChild(l),u.appendChild(m),u.appendChild(p),u.appendChild(g),u.appendChild(h),u.appendChild(f),s.appendChild(u),u.style.visibility="visible",n(t).replaceChildren(u)},d=()=>{const t=document.querySelectorAll(".edit-todo-button");document.querySelectorAll(".delete-todo-button").forEach((t=>t.addEventListener("click",e.deleteTodo))),t.forEach((t=>t.addEventListener("click",i))),document.querySelector("button.add-todo-button").addEventListener("click",a)},c=t=>{const e=document.createElement("div");e.className="todo-view",t.forEach((t=>{const n=(t=>{const[e,n,o,r]=t,a=document.createElement("form");a.className="todo";const i=document.createElement("h3");i.textContent=e,i.placeholder="Bob Jones",i.className="todo-view-name";const d=document.createElement("p");d.textContent=n,d.className="todo-description";const c=document.createElement("p");c.textContent=at(new Date(o),"MM/dd/yyyy"),c.className="todo-due-date";const s=document.createElement("p");s.textContent=r,s.className="todo-priority",s.style.backgroundColor="1"===r?"aquamarine":"2"===r?"rgb(255, 255, 205)":"rgb(255, 139, 126)";const u=document.createElement("input");u.type="button",u.className="edit-todo-button",u.value="edit";const l=document.createElement("input");return l.type="button",l.className="delete-todo-button",l.value="delete",a.appendChild(i),a.appendChild(d),a.appendChild(c),a.appendChild(s),a.appendChild(u),a.appendChild(l),a.cloneNode(!0)})(t.parameters);e.appendChild(n)}));const n=document.createElement("button");return n.className="add-todo-button",n.textContent="Add To-Do",e.appendChild(n),e.cloneNode(!0)};return d(),{get observerName(){return"ToDo"},buildView:c,updateView:t=>{const e=t.getTypeNameList("ToDo").itemList;document.querySelectorAll(".todo, .add-todo-window").forEach((t=>{t.remove()}));const n=c(e),o=document.querySelector("div.todo-view");document.querySelector("div.content-side").replaceChild(n,o),d()}}}(e.todoController);n.addObservers([o,a,r]),n.updateObservers(e.model)};var st=n(379),ut=n.n(st),lt=n(795),mt=n.n(lt),pt=n(569),gt=n.n(pt),ht=n(565),ft=n.n(ht),At=n(216),Ct=n.n(At),wt=n(589),bt=n.n(wt),vt=n(192),Bt={};Bt.styleTagTransform=bt(),Bt.setAttributes=ft(),Bt.insert=gt().bind(null,"head"),Bt.domAPI=mt(),Bt.insertStyleElement=Ct(),ut()(vt.Z,Bt),vt.Z&&vt.Z.locals&&vt.Z.locals,(()=>{const t=e(),n=dt(t);ct(n)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,